#!/bin/sh -e
#
# https://www.romanzolotarev.com/bin/m
# Copyright 2018-2019 Roman Zolotarev <hi@romanzolotarev.com>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#


main() {
	BASE_URL='m'
	: "${DB:=/db/www}"
	: "${PAGES:=/htdocs/$BASE_URL}"
	: "${ROOT:=}"
	HEADER='/htdocs/www/raw/_header.html'
	FOOTER='/htdocs/www/raw/_footer.html'

	URI=${REQUEST_URI##/$BASE_URL}
	case "$REQUEST_METHOD$URI" in
		GET/*?setup*) 			paddle_init; setup;;
		POST/*?send_magic_link*) 	send_magic_link;;
		GET/*?wait_for_magic_link*) 	wait_for_magic_link;;
		GET/*?magic=*) 			verify_magic_link;;
		GET/*?checkout=*)		paddle_checkout;;
		GET/*?profile*)			render_profile_page;;
		GET/*?cancel*)			paddle_cancel;;
		GET/*?sync*)			paddle_sync;;
		GET/*?log_out*)			log_out;;
		GET/*) 				render_page;;
		*) 				full_stop 'Wat?';;
	esac
}


##############################################################################


paddle_cancel() {
	u="${REQUEST_URI%%\?*}"
	m_id=$(get_cookie 'm_id')
	s_key=$(get_cookie 's_key')
	f="$DB/members/$m_id/sessions/$s_key"
	test -f "$f" || start_over 'You are not logged in'

	f="$DB/members/$m_id/paddle_subscription"
	test -f "$f" || paddle_no_sub

	sub_id=$(jq '.subscription_id' "$f")
	test -n "$sub_id" || paddle_no_sub

	curl -s -X POST \
	-d vendor_id="$PADDLE_ID" \
	-d vendor_auth_code="$PADDLE_AUTH_CODE" \
	-d subscription_id="$sub_id" \
	https://vendors.paddle.com/api/2.0/subscription/users_cancel

	paddle_no_sub
}

paddle_checkout() {
	u="${REQUEST_URI%%\?*}"
	m_id=$(get_cookie 'm_id')
	s_key=$(get_cookie 's_key')
	f="$DB/members/$m_id/sessions/$s_key"
	test -f "$f" || start_over 'You are not logged in'

	c_id=$(get_value "$QUERY_STRING" 'checkout')
	sub_id=$(
		curl -s GET \
		https://checkout.paddle.com/api/1.0/order?checkout_id="$c_id" |
		jq '.order.subscription_id'
	)

	paddle_fetch_subscription "$sub_id"
}

paddle_init() {
	test -x '/bin/cat' || http500 'cp /bin/cat /var/www/bin/cat
FAIL'

	f="$DB/paddle/id"
	test -r "$f" || http500 "PADDLE_ID: $f not a file"
	PADDLE_ID=$(cat "$f")

	f="$DB/paddle/auth_code"
	test -r "$f" || http500 "PADDLE_AUTH_CODE: $f not a file"
	PADDLE_AUTH_CODE=$(cat "$f")
}

paddle_fetch_subscription_by_email() {
	e="$1"

	paddle_init
	sub=$(
		curl -s -X POST \
		-d vendor_id="$PADDLE_ID" \
		-d vendor_auth_code="$PADDLE_AUTH_CODE" \
		https://vendors.paddle.com/api/2.0/subscription/users |
		jq '.response[] | select(.user_email=="'"$e"'")'
	)

	test -n "$sub" || paddle_no_sub

	make_file "$DB/members/$m_id/paddle_subscription" "$sub"
	paddle_sync
}

paddle_no_sub() {
	u="${REQUEST_URI%%\?*}"
	m_id=$(get_cookie 'm_id')
	s_key=$(get_cookie 's_key')

	f="$DB/members/$m_id/sessions/$s_key"
	test -f "$f" || http303 "$u"

	f="$DB/members/$m_id/email"
	test -f "$f" || start_over 'Cannot find your email'
	e=$(cat "$f")

	f="$DB/members/$m_id/paddle_subscription"
	test -f "$f" && rm "$f"

	f="$DB/members/$m_id/expires_at"
	if test -f "$f"
	then
		e_at=$(cat "$f")
		e_on=$(date -j -r "$e_at" '+%e %b %Y')
		state='
<p>Your memebership has been paid till <b>'"$e_on"'</b>,<br>
and then will be cancelled, no payments scheduled.<br>'
	else
		state='
<p>Your membership has been cancelled.<br>
You can <a href="'"$u"'#Continue">re-new your membership</a> anytime.</p>'
	fi

	make_file "$DB/members/$m_id/state" "$state"'
<div class="f7">Updated on '"$(date "+%e %b %Y at %H:%M:%S")"'.
<a href="?sync">Refresh</a></div>
'
	http303 "$u?profile"
}

paddle_sync() {
	u="${REQUEST_URI%%\?*}"
	m_id=$(get_cookie 'm_id')
	s_key=$(get_cookie 's_key')

	f="$DB/members/$m_id/sessions/$s_key"
	test -f "$f" || http303 "$u"

	f="$DB/members/$m_id/email"
	test -f "$f" || start_over 'Cannot find your email'
	e=$(cat "$f")

	f="$DB/members/$m_id/paddle_subscription"
	test -f "$f" || paddle_fetch_subscription_by_email "$e"

	sub=$(jq . "$f")
	sub_state=$(echo "$sub" | jq -r '.state')
	update_url=$(echo "$sub" | jq -r '.update_url')
	next_due=$(echo "$sub" | jq -r '.next_payment.date')

	if test "$sub_state" = 'active'
	then
		e_at=$(date -j '+%s' "$(echo "$next_due" | tr -d'-')"0000)
		e_on=$(date -j -r "$e_at" '+%b %e, %Y')
		make_file "$DB/members/$m_id/expires_at" "$e_at"
	else
		rm "$DB/members/$m_id/expires_at"
	fi

	case "$sub_state" in
		active)
			next_amount=$(echo "$sub" | jq -r '.next_payment.amount')
			next_currency=$(echo "$sub" | jq -r '.next_payment.currency')
			next_payment="$(printf '%.2f' "$next_amount") $next_currency"
			state='
<p>Your memebership has been paid till <b>'"$e_on"'</b>,<br>
the next payment of <b>'"$next_payment"'</b> will be processed on that day.<br>
<span class="f7">You can <a class="red hover-red"
title="Are you sure?" href="?cancel">cancel payments instantly</a> or
<a href="'"$update_url"'">change your payment method</a> anytime.</span></p>
'
		;;

		deleted)
			state='
<p>Your membership has been cancelled.<br>
You can <a href="'"$u"'#Continue">re-new your membership</a> anytime.</p>
'
		;;

		past_due) state='
<p>Your membership has been suspended. Waiting for the payment.
<p>You can <a href="?cancel">cancel</a> or
<a href="'"$update_url"'">change the next payment</a> anytime.</p>
'
		;;

		*) start_over 'Wrong subscription state' ;;
	esac

	make_file "$DB/members/$m_id/state" "$state"'
<div class="f7">Updated on '"$(date "+%e %b %Y at %H:%M:%S")"'.
<a href="?sync">Refresh</a></div>
'
	http303 "$u?profile"
}

paddle_fetch_subscription() {
	u="${REQUEST_URI%%\?*}"
	m_id=$(get_cookie 'm_id')
	sub_id="$1"

	paddle_init
	sub=$(
		curl -s -X POST \
		-d vendor_id="$PADDLE_ID" \
		-d vendor_auth_code="$PADDLE_AUTH_CODE" \
		-d subscription_id="$sub_id" \
		https://vendors.paddle.com/api/2.0/subscription/users |
		jq '.response[0]'
	)
	f="$DB/members/$m_id/email"
	test -f "$f" || start_over 'Cannot find your email'

	e=$(cat "$f")
	user_email=$(echo "$sub" | jq -r '.user_email')

	test "$user_email" = "$e" || http500 'wrong email'

	make_file "$DB/members/$m_id/paddle_subscription" "$sub"
	paddle_sync
}



wait_for_magic_link() {
	u="${REQUEST_URI%%\?*}"
	m_id=$(get_cookie 'm_id')
	s_key=$(get_cookie 's_key')
	f="$DB/members/$m_id/sessions/$s_key"

	test -f "$f" && http303 "$u"

	http200 '
<div class="pv3 mt4 dark-gray">
<p>
Sending a magic link to you in a minute.<br>
Please <b>check your mailbox</b>.</p>
<p class="f7">Didn'\''t get an email?
<a href="'"$u"'#Continue">Try again</a>
</p>
</div>
'
}


start_over() {
	err="$1"
	u="$2"

	test -z "$u" && u="${REQUEST_URI%%\?*}"
	m_id=$(get_cookie 'm_id')
	s_key=$(get_cookie 's_key')
	f="$DB/members/$m_id/sessions/$s_key"
	test -f "$f" && http303 "$u"

	http200 '<h1>Oops...</h1><p>'"$err"'</p>
<p><a href="'"$u"'">Start over</a></p>'
}


full_stop() {
	err="$1"
	fb='/feedback.html?comment='"$(encode_value "\"$err\"")"
	u="${REQUEST_URI%%\?*}"

	http200 '<h1>Sorry</h1>
<p>Something went wrong, please <a href="'"$fb"'">let me know</a>.</p>
<p>'"$err"'</p>
<p><a href="'"$u"'">Try a bit later</a></p>'

}



verify_magic_link() {
	u_key_b=$(get_value "$QUERY_STRING" 'magic')
	test -n "$u_key_b" || start_over 'This magic link is broken'

	u_e_hash=$(get_cookie 'e_hash')

	u_key_a=$(get_cookie 'key_a')
	test -z "$u_e_hash" || test -z "$u_key_a" &&
	start_over 'Looks like you are using a different web browser'

	f="$DB/magic_links/$u_e_hash"
	test -f "$f" || start_over 'This magic link is expired'
	test "$(cut -f1 < "$f")" = "$u_key_a:$u_key_b" ||
	start_over 'This magic link is invalid'

	e=$(cut -f2 < "$f")
	rm "$f"
	m_id=$(get_member_id "$e")
	test -n "$m_id" || create_member "$e"

	s_key=$(create_session "$m_id")

	http303 "${REQUEST_URI%%\?*}" \
'Content-Type: text/html; charset=utf-8
Set-Cookie: m_id='"$m_id"'; Path=/; HttpOnly
Set-Cookie: s_key='"$s_key"'; Path=/; HttpOnly
Set-Cookie: key_a=; Path=/; HttpOnly
Set-Cookie: e_hash=; Path=/; HttpOnly'
}


log_out() {
	m_id=$(get_cookie 'm_id')
	s_key=$(get_cookie 's_key')

	f="$DB/members/$m_id/sessions/$s_key"
	test -f "$f" && rm "$f"

	http303 "${REQUEST_URI%%\?*}" \
'Content-Type: text/html; charset=utf-8
Set-Cookie: m_id=; Path=/; HttpOnly
Set-Cookie: s_key=; Path=/; HttpOnly'
}


get_member_id() {
	e="$1"
	e_hash=$(echo "$e" | sha256)

	d="$DB/members"
	test -d "$d" || { echo; return; }
	f=$(find "$d" -name "$e_hash" -path '*/emails/*' -type f | head -1)
	m="${f##$d/}"
	echo "${m%%/*}"
}


create_member() {
	e="$1"
	m_id=$(random_str 20)
	e_hash=$(echo "$e" | sha256)

	make_file "$DB/members/$m_id/created_at" "$(date +%s)"
	make_file "$DB/members/$m_id/email" "$e"
	make_file "$DB/members/$m_id/emails/$e_hash" "$e"

	s_key=$(create_session "$m_id")

	http303 "${REQUEST_URI%%\?*}" \
'Content-Type: text/html; charset=utf-8
Set-Cookie: m_id='"$m_id"'; Path=/; HttpOnly
Set-Cookie: s_key='"$s_key"'; Path=/; HttpOnly
Set-Cookie: key_a=; Path=/; HttpOnly
Set-Cookie: e_hash=; Path=/; HttpOnly'
}


create_session() {
	m_id="$1"
	s_key=$(random_str 20)
	make_file "$DB/members/$m_id/sessions/$s_key"
	echo "$s_key"
}


send_magic_link() {
	query=$(read_query_string_post) || start_over 'Invalid request'
	e=$(get_value "$query" 'email' | tr '[:upper:]' '[:lower:]')
	e_hash=$(echo "$e" | sha256)
	key_a=$(random_str 20)
	key_b=$(random_str 20)

	make_file "$DB/magic_links/$e_hash" "$key_a:$key_b	$e"
	make_file "$DB/mail_queue/m-$e_hash" 'To: '"$e"'
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit
Subject: [RGZ.EE] Here is your magic link

Hey, please open this link to log in:

'"https://rgz.ee${REQUEST_URI%%\?*}?magic=$key_b"'

--

The link will expire in a day. Sent to: '"$e"

	http303 "${REQUEST_URI%%\?*}?wait_for_magic_link" \
'Content-Type: text/html; charset=utf-8
Set-Cookie: key_a='"$key_a"'; Path=/; HttpOnly
Set-Cookie: e_hash='"$e_hash"'; Path=/; HttpOnly'
}


##############################################################################


subscription_form() {
	f="$1"
	m_id="$2"

	test -f "$DB/members/$m_id/email" &&
	e=$(cat "$DB/members/$m_id/email")

	header='<div class="f7 mt2"><a href="?profile">'"$e"'</a></div>'
	footer='
<div id="Continue"
class="z-index-1 sticky top-0 mt4 pv3 bg-near-white dark-gray tc">
	<p>Upgrade to continue.</p>

	<button id="button-549707"
	class="outline dib pa2 ba mr2 mb2 w-100 w4-m w4-l
	black bg-white b--light-gray hover-bg-black hover-white">
	<span class="paddle-net b"
	data-product="549707">&euro;9.00</span>
	/&nbsp;month
	</button>

	<button id="button-549237"
	class="outline dib pa2 ba mr2 mb2 w-100 w4-m w4-l
	black bg-yellow b--black hover-bg-black hover-white">
	<span class="paddle-net b"
	data-product="549237">&euro;90.00</span>
	/&nbsp;year
	</button>

	<div>
	<a id="button-551192" href="https://pay.paddle.com/checkout/551192">
	Enterprise
	<span class="paddle-net b"
	data-product="551192">&euro;550.00</span>
	/&nbsp;month</a>
	</div>

	<p class="f7">Already paid? <a href="?sync">Refresh</a></p>

</div>

<script src="https://cdn.paddle.com/paddle/paddle.js"></script>
<script type="text/javascript">
Paddle.Setup({ vendor: 38540 });
[
  549707,
  549237,
  551192,
].forEach(
  function(x) {
    //Paddle.Product.Prices(x, console.log);
    document
    .getElementById("button-" + x)
    .addEventListener("click",
      function() {
        Paddle.Checkout.open({
          product: x,
          email: "'"$e"'",
          // closeCallback: console.log,
          successCallback: function(data) {
            window.location = "'"${REQUEST_URI%%\?*}?checkout="'" + data.checkout.id;
            console.log(data);
            var checkoutId = data.checkout.id;
            Paddle.Order.details(checkoutId, console.log);
          }

        });
      },
    false);
  }
);
</script>
'

http200 "$(tags_to_upper < "$f" | obfuscate "$header" "$footer")"

}


new_session_form() {
	f="$1"
	header='<div class="f7 mt2"><a href="#Continue">Register or log in</a></div>'
	footer='
<div id="Continue"
class="z-index-1 sticky top-0 mt4 pv3 tc">
<div class="mb2">Type-in your email address</div>
<div class="cf center">
<form
	method=post
	action='"${REQUEST_URI%%\?*}"'?send_magic_link
	class="form">
	<input
		tabindex="1"
		type="email"
		class="f7 w-100 w5-m w5-l mb2 ba pa2 mr2
		outline black bg-white b--light-gray
		hover-bg-white"
		autocorrect="off"
		specllcheck="false"
		required="required"
		minlength="2"
		maxlength="255"
	 	name="email"
		placeholder="alice@example.com"
		value="'"$e"'">
	<input
		tabindex="2"
		type="submit"
		class="f7 w-100 w4-m w4-l outline dib pa2 ba mb2
		black bg-yellow b--black
		hover-bg-black hover-white"
		value="Register or log in">

</form>

<p class="ph2 f7">
By clicking <em>Register or log in</em> you are accepting
<a href="/terms.html">User&nbsp;Agreement</a>,
<a href="/privacy.html">Privacy&nbsp;Policy</a>,
<a href="/'"$BASE_URL"'/#Pricing">Pricing</a>, and
some cookies. &#x1F36A;
</p>

</div>
</div>
</div>
'

http200 "$(tags_to_upper < "$f" | obfuscate "$header" "$footer")"

}


render_page() {
	p_uri="${PAGES}${URI%%\?*}"
	if test "${p_uri%%/}" = "$p_uri"
	then f="$p_uri"
	else f="${p_uri}index.html"
	fi
	test -f "$f" || http404

	m_id=$(get_cookie 'm_id')
	s_key=$(get_cookie 's_key')
	test -f "$DB/members/$m_id/sessions/$s_key" ||
	new_session_form "$f"

	test -f "$DB/members/$m_id/expires_at" ||
	subscription_form "$f" "$m_id"

	test -f "$DB/members/$m_id/email" &&
	e=$(cat "$DB/members/$m_id/email")

	http200 '<div class="f7 mt2"><a href="?profile">'"$e"'</a></div>
'"$(cat "$f")"
}

render_profile_page() {
	u="${REQUEST_URI%%\?*}"
	m_id=$(get_cookie 'm_id')
	s_key=$(get_cookie 's_key')

	f="$DB/members/$m_id/sessions/$s_key"
	test -f "$f" || http303 "$u"

	f="$DB/members/$m_id/email"
	test -f "$f" && e=$(cat "$f")


	f="$DB/members/$m_id/state"
	if test -f "$f"
	then state=$(cat "$DB/members/$m_id/state")
	else state='<p>Your membership status is unknown.</p>'
	fi

	http200 '
<div class="f7 mt2"><a href='"$u"'>Go back</a></div>
<p><h1>Hello</h1> and <em>thank you</em> for your support &#x2764;</p>
'"$state"'
<div class="f7">You'\''re logged in as <b title="'"member: $m_id\\nsession: $s_key"'">'"$e"'</b>.
<span class="f7"><a href="?log_out">Log out</a></div>
'
}


##############################################################################


read_query_string_post() {
	test -n "$CONTENT_LENGTH" || start_over 'Invalid content'
	dd bs=1 count="$CONTENT_LENGTH" status=none
}


get_cookie() {
	c="${HTTP_COOKIE##*$1=}"
	test -z "$c" ||
	test "$HTTP_COOKIE" = "$c" &&
	echo '' && return
	echo "${c%%;*}"
}


encode_value() {
	test -n "$1" || { echo; return; }
	echo "$1" | awk '
	BEGIN {
		a = ""
		for (n = 0; n < 256; n++)
		pack[sprintf("%c", n)] = sprintf("%%%02x", n) } {
		sline = ""
		slen = length($0)
		for (n = 1; n <= slen; n++) {
			char = substr($0, n, 1)
			if ( char !~ /^[[:alnum:]_]$/ ) char = pack[char]
			sline = sline char
		}
		a = a ( a ? "%0a" : "" ) sline
	}
	END { print a }'
}


get_value() {
	# h/t Devin Teske
	test -n "$1" || { echo; return; }
	x="${1##*$2=}"
	test "$x" = "$1" && { echo; return; }
	# shellcheck disable=1004
	echo "${x%%&*}" | awk '
	BEGIN { for (n = 0; n < 256; n++) chr[n] = sprintf("%c",n) } {
		t = $0
		a = ""
		gsub(/\+/, " ", t)
		while( match(t, /%[[:xdigit:]][[:xdigit:]]/) ) {
			a = a substr(t, 1, RSTART-1)\
			chr[ sprintf("%u", "0x" substr(t, RSTART+1, 2))]
			t = substr(t, RSTART+RLENGTH)
		}
		a = a t
		print a
	}'
}


obfuscate() {
	echo "$1"
	page=$(cat)
	echo "$page" |
	awk '{ print; if ( $0 == "<!-- cut -->" ) exit }'
	echo "$2"
	cut=$(
	echo "$page" |
	awk '
	BEGIN { cut = 0 }
	{
		if ( cut == 0 && $0 == "<!-- cut -->" ) cut = 1
		if ( cut == 1 ) print
	}
	' |
	tr '[:lower:]' "$(jot -rcs '' 26 97 122)"
	)
	test -n "$cut" || return
	echo '
<p class="f7 gray tc">
The rest of the page is obfuscated
</p>
<div class="blur3 z-index--1">
'"$cut"'
</div>
'
}


tags_to_upper() {
	awk '
	BEGIN {
		s = "[[:space:]]"
		while (getline) b = b "\n" $0
		b = substr (b, 2) }
	END {
		t=b
		while ( match (t,/<[^>]*>/) ) {
		h = h substr (t, 1, RSTART - 1)
		r = substr (t, RSTART, RLENGTH)
		t = substr (t, RSTART + RLENGTH)
		if ( match (r, /^<s*(\/s*)?[a-zA-Z]+/))
		r=toupper(substr(r, 1, RLENGTH)) substr (r, RLENGTH + 1)
		h=h r
		}
		h=h t
		print h
	}
	'
}


random_str() {
	jot -rcs '' "$1" 97 122
}


make_file() {
	mkdir -p "${1%/*}"
	chmod 0770 "${1%/*}"
	echo "$2" > "$1"
	chmod 0660 "$1"
}


##############################################################################


http500() {
	echo 'Status: 500 Internal Server Error'
	echo
	echo "<pre>$1</pre>"
	exit 1
}

http404() {
	echo 'Status: 404 Not Found'
	echo
	cat "$HEADER"
	echo "<h1>Oops...</h1><p>/$BASE_URL$URI not found</p>"
	cat "$FOOTER"
	exit 0
}

http303() {
	echo 'Status: 303 See Other'
	echo "Location: $1"
	echo 'Content-Type: text/html; charset=utf-8'
	test -n "$2" && echo "$2"
	echo
	exit 0
}

http200() {
	echo 'Status: 200 OK'
	echo
	cat "$HEADER"
	echo "$1"
	cat "$FOOTER"
	exit 0
}


##############################################################################


setup() {
	errs=$(
		setup_test_deps
		test -d "$PAGES" || echo "PAGES: $PAGES: not a dir"
		test -r "$HEADER" || echo "HEADER: $HEADER: not a file"
		test -r "$FOOTER" || echo "FOOTER: $FOOTER: not a file"
		test -d "$DB" || echo "$DB not a dir"
	)
	test -z "$errs" || http500 "$errs\\nFAILED"
	echo 'Status: 200 OK'
	echo
	echo '<pre>PASS</pre>'
	exit 0
}

setup_test_deps() {
	test -x '/usr/local/bin/curl' || echo 'pkg_add curl'
	test -x '/usr/local/bin/jq' || echo 'pkg_add jq'
	dirs=''

	echo '
/etc/resolv.conf
/etc/ssl/cert.pem

/bin/cat
/bin/chmod
/bin/date
/bin/dd
/bin/mkdir
/bin/rm
/bin/sh
/bin/sha256
/usr/bin/awk
/usr/bin/b64encode
/usr/bin/cut
/usr/bin/find
/usr/bin/grep
/usr/bin/head
/usr/bin/jot
/usr/bin/printf
/usr/bin/sed
/usr/bin/tail
/usr/bin/tr
/usr/bin/wc
/usr/local/bin/curl
/usr/local/bin/jq

/usr/lib/libc.so.92.5
/usr/lib/libcrypto.so.44.1
/usr/lib/libm.so.10.1
/usr/lib/libpthread.so.25.1
/usr/lib/libssl.so.46.1
/usr/lib/libutil.so.13.0
/usr/lib/libz.so.5.0
/usr/libexec/ld.so
/usr/local/lib/libcurl.so.25.17
/usr/local/lib/libjq.so.1.0
/usr/local/lib/libnghttp2.so.0.14
' |
	while read -r f
	do
		test -n "$f" || continue
		d=${f%/*}
		if test "${dirs%%:$d}" = "$dirs" &&
		test "$d" != '/usr/local/lib'
		then
			dirs="$dirs:$d" && test -d "${ROOT}$d" ||
			echo "mkdir -p /var/www$d"
		fi
		test "${f##/usr/local/lib/}" = "$f" &&
		x="$f" || x="/usr/lib${f##/usr/local/lib}"
		test -f "${ROOT}$x" || echo "cp $f /var/www$x"
	done
}


##############################################################################


main
