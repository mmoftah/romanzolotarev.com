#!/bin/sh -e
#
# https://www.romanzolotarev.com/bin/m
# Copyright 2018-2019 Roman Zolotarev <hi@romanzolotarev.com>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#


main() {
	BASE_URL='m'
	: "${DB:=/db/www}"
	: "${PAGES:=/htdocs/$BASE_URL}"
	: "${ROOT:=}"
	HEADER="/htdocs/www/raw/_header.html"
	FOOTER="/htdocs/www/raw/_footer.html"

	URI=${REQUEST_URI##/$BASE_URL}
	case "$REQUEST_METHOD$URI" in
		GET/*?log_out*)			log_out;;
		GET/*?magic=*) 			verify_magic_link;;
		GET/*?setup*) 			setup;;
		GET/*?wait_for_magic_link*) 	wait_for_magic_link;;
		GET/*) 				render_page;;
		POST/*?send_magic_link*) 	send_magic_link;;
		*) 				full_stop 'Wat?';;
	esac
}


##############################################################################


wait_for_magic_link() {
	u="${REQUEST_URI%%\?*}"
	m_id=$(get_cookie 'm_id')
	s_key=$(get_cookie 's_key')
	f="$DB/members/$m_id/sessions/$s_key"

	if test -f "$f"
	then
		echo 'Status: 303 See Other'
		echo "Location: $u"
		echo 'Content-Type: text/html; charset=utf-8'
		echo
		exit 0
	fi

	http200 '
<div class="pa3 ba mt4 bg-white b--light-gray dark-gray f7">
<div class="mb2">
Sending a magic link to you in a minute.<br>
Please <b>check your mailbox</b>.<br><br>
<a href="'"$u"'">Or try again</a></div>
</div>
'
}


start_over() {
	err="$1"
	u="$2"

	test -z "$u" && u="${REQUEST_URI%%\?*}"
	m_id=$(get_cookie 'm_id')
	s_key=$(get_cookie 's_key')
	f="$DB/members/$m_id/sessions/$s_key"
	if test -f "$f"
	then
		echo 'Status: 303 See Other'
		echo "Location: $u"
		echo 'Content-Type: text/html; charset=utf-8'
		echo
		exit 0
	fi

	http200 '<h1>Oops...</h1><p>'"$err"'</p>
<p><a href="'"$u"'">Start over</a></p>'
}


full_stop() {
	err="$1"
	fb='/feedback.html?comment='"$(encode_value "\"$err\"")"
	u="${REQUEST_URI%%\?*}"

	http200 '<h1>Sorry</h1>
<p>Something went wrong, please <a href="'"$fb"'">let me know</a>.</p>
<p>'"$err"'</p>
<p><a href="'"$u"'">Try a bit later</a></p>'

}



verify_magic_link() {
	u_key_b=$(get_value "$QUERY_STRING" 'magic')
	test -n "$u_key_b" || start_over 'This magic link is broken'

	u_e_hash=$(get_cookie 'e_hash')
	u_key_a=$(get_cookie 'key_a')
	test -z "$u_e_hash" || test -z "$u_key_a" &&
	start_over 'Looks like you are using a different web browser'

	f="$DB/magic_links/$u_e_hash"
	test -f "$f" || start_over 'This magic link is expired'
	test "$(cut -f1 < "$f")" = "$u_key_a:$u_key_b" ||
	start_over 'This magic link is invalid'

	e=$(cut -f2 < "$f")
	rm "$f"
	m_id=$(get_member_id "$e")
	test -n "$m_id" || create_member "$e"

	s_key=$(create_session "$m_id")

	echo 'Status: 303 See Other'
	echo "Location: ${REQUEST_URI%%\?*}"
	echo 'Content-Type: text/html; charset=utf-8'
	echo "Set-Cookie: m_id=$m_id; Path=/; HttpOnly"
	echo "Set-Cookie: s_key=$s_key; Path=/; HttpOnly"
	echo 'Set-Cookie: key_a=; Path=/; HttpOnly'
	echo 'Set-Cookie: e_hash=; Path=/; HttpOnly'
	echo
	exit 0
}


log_out() {
	m_id=$(get_cookie 'm_id')
	s_key=$(get_cookie 's_key')

	f="$DB/members/$m_id/sessions/$s_key"
	test -f "$f" && rm "$f"

	echo 'Status: 303 See Other'
	echo "Location: ${REQUEST_URI%%\?*}"
	echo 'Content-Type: text/html; charset=utf-8'
	echo "Set-Cookie: m_id=; Path=/; HttpOnly"
	echo "Set-Cookie: s_key=; Path=/; HttpOnly"
	echo
	exit 0
}


get_member_id() {
	e="$1"
	e_hash=$(echo "$e" | sha256)

	d="$DB/members"
	test -d "$d" || { echo; return; }
	f=$(find "$d" -name "$e_hash" -path '*/emails/*' -type f | head -1)
	m="${f##$d/}"
	echo "${m%%/*}"
}


create_member() {
	e="$1"
	m_id=$(random_str 20)
	e_hash=$(echo "$e" | sha256)

	make_file "$DB/members/$m_id/created_at" "$(date +%s)"
	make_file "$DB/members/$m_id/email" "$e"
	make_file "$DB/members/$m_id/emails/$e_hash" "$e"

	s_key=$(create_session "$m_id")

	echo 'Status: 303 See Other'
	echo "Location: ${REQUEST_URI%%\?*}"
	echo 'Content-Type: text/html; charset=utf-8'
	echo "Set-Cookie: m_id=$m_id; Path=/; HttpOnly"
	echo "Set-Cookie: s_key=$s_key; Path=/; HttpOnly"
	echo 'Set-Cookie: key_a=; Path=/; HttpOnly'
	echo 'Set-Cookie: e_hash=; Path=/; HttpOnly'
	echo
	exit 0
}


create_session() {
	m_id="$1"
	s_key=$(random_str 20)
	make_file "$DB/members/$m_id/sessions/$s_key"
	echo "$s_key"
}


send_magic_link() {
	query=$(read_query_string_post) || start_over 'Invalid request'
	e=$(get_value "$query" 'email' | tr '[:upper:]' '[:lower:]')
	e_hash=$(echo "$e" | sha256)
	key_a=$(random_str 20)
	key_b=$(random_str 20)

	make_file "$DB/magic_links/$e_hash" "$key_a:$key_b	$e"
	make_file "$DB/mail_queue/m-$e_hash" 'To: '"$e"'
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit
Subject: '"${SERVER_NAME##www.}"': here is your magic link

Hey, please open this link in the same browser you requested it from:

'"$HTTP_ORIGIN${REQUEST_URI%%\?*}?magic=$key_b"'

--

The link will expire in an hour. Sent to: '"$e"

	echo 'Status: 303 See Other'
	echo "Location: ${REQUEST_URI%%\?*}?wait_for_magic_link"
	echo 'Content-Type: text/html; charset=utf-8'
	echo "Set-Cookie: key_a=$key_a; Path=/; HttpOnly"
	echo "Set-Cookie: e_hash=$e_hash; Path=/; HttpOnly"
	echo
	exit 0
}


##############################################################################




##############################################################################


subscription_form() {
	f="$1"
	m_id="$2"

	test -f "$DB/members/$m_id/email" &&
	e=$(cat "$DB/members/$m_id/email")

	box='
<div class="ph3 ba mt4 bg-white b--light-gray dark-gray f7">

	<p>Hey, <b>'"$e"'</b>!</p>

	<button id="button-549707"
	class="f7 outline dib pa2 ba
	black bg-white b--light-gray
	hover-bg-black hover-white"
	>Upgrade
	<b>&euro;9.00</b>
	/&nbsp;month</span>
	</button>

	<button id="button-549237"
	class="f7 outline dib pa2 ba
	black bg-yellow b--black
	hover-bg-black hover-white"
	>Upgrade
	<b>&euro;90.00</b>
	/&nbsp;year</span>
	</button>

	<!--button id="button-549725"
	class="f7 outline dib pa2 ba
	black bg-white b--light-gray
	hover-bg-black hover-white"
	>Upgrade
	<b>&euro;1.00</b>
	/&nbsp;month</span>
	</button-->

	<p>VAT, GST, or sale tax may be added if applicable.</p>
</div>

<script src="https://cdn.paddle.com/paddle/paddle.js"></script>
<script type="text/javascript">
Paddle.Setup({ vendor: 38540 });
[
  549707,
  549237,
  549725,
].forEach(
  function(x) {
    document
    .getElementById("button-" + x)
    .addEventListener("click",
      function() {
	// Paddle.Product.Prices(x, console.log);
        Paddle.Checkout.open({
          product: x,
          email: "'"$e"'",
          success: "/paddle/success",
          passthrough: "'"${REQUEST_URI%%\?*}"'",
        });
      },
    false);
  }
);
</script>
'

http200 "$(tags_to_upper < "$f" | obfuscate "$box")"

}


new_session_form() {
	f="$1"
	box='
<div class="pa3 ba mt4 bg-white b--light-gray dark-gray f7">
<div class="mb2">Type-in <b>your email address</b></div>
<div class="cf center">
<form
	method=post
	action='"${REQUEST_URI%%\?*}"'?send_magic_link
	class="form">
	<div class="fl w-100 w-75-m w-75-l">
	<div class="pr2-l pr2-m">
	<input
		tabindex="1"
		type="email"
		class="f7 w-100 mb2 pa2 ba mr2
		outline black bg-white b--light-gray
		hover-bg-white"
		autocorrect="off"
		specllcheck="false"
		required="required"
		minlength="2"
		maxlength="255"
		autofocus="autofocus"
	 	name="email"
		placeholder="alice@example.com"
		value="'"$e"'">
	By clicking <em>Register or log in</em> you are accepting<br>
	<a href="/terms.html">User&nbsp;Agreement</a> and
	<a href="/privacy.html">Privacy&nbsp;policy</a>
	</div>
	</div>
	<div class="fl w-25-m w-25-l">

	<input
		tabindex="2"
		type="submit"
		class="f7 w-100 outline dib pa2 ba mb2
		black bg-white b--light-gray
		hover-bg-black hover-white"
		value="Register or log in">

	</div>
</form>
</div>
</div>'

http200 "$(tags_to_upper < "$f" | obfuscate "$box")"

}


render_page() {
	p_uri="${PAGES}${URI%%\?*}"
	if test "${p_uri%%/}" = "$p_uri"
	then f="$p_uri"
	else f="${p_uri}index.html"
	fi
	test -f "$f" || http404

	m_id=$(get_cookie 'm_id')
	s_key=$(get_cookie 's_key')
	test -f "$DB/members/$m_id/sessions/$s_key" ||
	new_session_form "$f"

	test -f "$DB/members/$m_id/expires_at" ||
	subscription_form "$f" "$m_id"

	e_at=$(cat "$DB/members/$m_id/expires_at")
	e_on=$(date -j -r "$e_at" '+%b %d, %Y')
	t_l=$(time_left "$e_at")

	test -f "$DB/members/$m_id/email" &&
	e=$(cat "$DB/members/$m_id/email")

	if test -f "$DB/members/$m_id/paypal_agreement_id" &&
	test -f "$DB/members/$m_id/paypal_agreement_state"
	then
		a_id=$(cat "$DB/members/$m_id/paypal_agreement_id")
		a_s=$(cat "$DB/members/$m_id/paypal_agreement_state")

		p_d=$(cat "$DB/paypal/domain")
		a_uri="https://www.$p_d/myaccount/autopay/connect/$a_id"

		case "$a_s" in

			Pending) t="$e"' &mdash;
<a href="'$a_uri'"
	title="Processing may take up to 24 hours">Pending</a>...'
				;;

			Active) t="$e"' &mdash;
<a href="'$a_uri'"
	title="Next payment on '"$e_on"'">'"$t_l"'</a>'
				;;

			Cancelled) t="$e"' &mdash;
<a href="'$a_uri'"
	title="Next payments cancelled. Expires on '"$e_on"'">'"$t_l"'</a>'
				;;

			*) t="$e &mdash; $t_l";;
		esac

	else t="$e &mdash; $t_l";
	fi

	http200 '<p>'"$t"'</p>'"$(cat "$f")"
}


time_left() {
	e_at="$1"
	e_in=$(( e_at - $(date +%s) ))
	test "$e_in" -lt 86400 && echo "expires today" && return
	test "$e_in" -lt 172800 && echo "expires tomorrow" && return
	test "$e_in" -ge 172800 && echo "$(( e_in / 86400 )) days" && return
}


##############################################################################


read_query_string_post() {
	test -n "$CONTENT_LENGTH" || start_over 'Invalid content'
	dd bs=1 count="$CONTENT_LENGTH" status=none
}


get_cookie() {
	c="${HTTP_COOKIE##*$1=}"
	test -z "$c" ||
	test "$HTTP_COOKIE" = "$c" &&
	echo '' && return
	echo "${c%%;*}"
}


encode_value() {
	test -n "$1" || { echo; return; }
	echo "$1" | awk '
	BEGIN {
		a = ""
		for (n = 0; n < 256; n++)
		pack[sprintf("%c", n)] = sprintf("%%%02x", n) } {
		sline = ""
		slen = length($0)
		for (n = 1; n <= slen; n++) {
			char = substr($0, n, 1)
			if ( char !~ /^[[:alnum:]_]$/ ) char = pack[char]
			sline = sline char
		}
		a = a ( a ? "%0a" : "" ) sline
	}
	END { print a }'
}


get_value() {
	# h/t Devin Teske
	test -n "$1" || { echo; return; }
	x="${1##*$2=}"
	test "$x" = "$1" && { echo; return; }
	# shellcheck disable=1004
	echo "${x%%&*}" | awk '
	BEGIN { for (n = 0; n < 256; n++) chr[n] = sprintf("%c",n) } {
		t = $0
		a = ""
		gsub(/\+/, " ", t)
		while( match(t, /%[[:xdigit:]][[:xdigit:]]/) ) {
			a = a substr(t, 1, RSTART-1)\
			chr[ sprintf("%u", "0x" substr(t, RSTART+1, 2))]
			t = substr(t, RSTART+RLENGTH)
		}
		a = a t
		print a
	}'
}


obfuscate() {
	page=$(cat)
	echo "$page" |
	awk '{ print; if ( $0 == "<!-- cut -->" ) exit }'
	echo "$1"

	cut=$(
		echo "$page" |
		awk '
		BEGIN { cut = 0 }
		{
			if ( cut == 0 && $0 == "<!-- cut -->" ) cut = 1
			if ( cut == 1 ) print
		}
		' |
		tr '[:lower:]' "$(jot -rcs '' 26 97 122)"
	)
	test -n "$cut" || return
	echo '<div class="bg-washed-yellow mt3 ba b--dark-yellow w6 pa3">'
	echo "$cut"
	echo '</div>'
}


tags_to_upper() {
	awk '
	BEGIN {
		s = "[[:space:]]"
		while (getline) b = b "\n" $0
		b = substr (b, 2) }
	END {
		t=b
		while ( match (t,/<[^>]*>/) ) {
		h = h substr (t, 1, RSTART - 1)
		r = substr (t, RSTART, RLENGTH)
		t = substr (t, RSTART + RLENGTH)
		if ( match (r, /^<s*(\/s*)?[a-zA-Z]+/))
		r=toupper(substr(r, 1, RLENGTH)) substr (r, RLENGTH + 1)
		h=h r
		}
		h=h t
		print h
	}
	'
}


random_str() {
	jot -rcs '' "$1" 97 122
}


make_file() {
	mkdir -p "${1%/*}"
	chmod 0770 "${1%/*}"
	echo "$2" > "$1"
	chmod 0660 "$1"
}


##############################################################################


http500() {
	echo 'Status: 500 Internal Server Error'
	echo
	echo "<pre>$1</pre>"
	exit 1
}

http404() {
	echo 'Status: 404 Not Found'
	echo
	cat "$HEADER"
	echo "<h1>Oops...</h1><p>/$BASE_URL$URI not found</p>"
	cat "$FOOTER"
	exit 0
}

http200() {
	echo 'Status: 200 OK'
	echo
	cat "$HEADER"
	echo "$1"
	cat "$FOOTER"
	exit 0
}

##############################################################################


setup() {
	errs=$(
		setup_test_deps
		test -d "$PAGES" || echo "$PAGES: not a dir"
		test -f "$HEADER" || echo "$HEADER: not a file"
		test -f "$FOOTER" || echo "$FOOTER: not a file"
		test -d "$DB" || echo "$DB not a dir"
	)
	test -z "$errs" || http500 "$errs\\nFAILED"
	echo 'Status: 200 OK'
	echo
	echo '<pre>PASS</pre>'
	exit 0
}


setup_test_deps() {
	test -x '/usr/local/bin/curl' || echo 'pkg_add curl'
	test -x '/usr/local/bin/jq' || echo 'pkg_add jq'
	dirs=''

	echo '
/etc/resolv.conf
/etc/ssl/cert.pem

/bin/cat
/bin/chmod
/bin/date
/bin/dd
/bin/mkdir
/bin/rm
/bin/sh
/bin/sha256
/usr/bin/awk
/usr/bin/b64encode
/usr/bin/find
/usr/bin/grep
/usr/bin/head
/usr/bin/jot
/usr/bin/printf
/usr/bin/sed
/usr/bin/tail
/usr/bin/tr
/usr/bin/wc
/usr/local/bin/curl
/usr/local/bin/jq

/usr/lib/libc.so.92.5
/usr/lib/libcrypto.so.44.1
/usr/lib/libm.so.10.1
/usr/lib/libpthread.so.25.1
/usr/lib/libssl.so.46.1
/usr/lib/libutil.so.13.0
/usr/lib/libz.so.5.0
/usr/libexec/ld.so
/usr/local/lib/libcurl.so.25.17
/usr/local/lib/libjq.so.1.0
/usr/local/lib/libnghttp2.so.0.14
' |
	while read -r f
	do
		test -n "$f" || continue
		d=${f%/*}
		if test "${dirs%%:$d}" = "$dirs" &&
		test "$d" != '/usr/local/lib'
		then
			dirs="$dirs:$d" && test -d "${ROOT}$d" ||
			echo "mkdir -p /var/www$d"
		fi
		test "${f##/usr/local/lib/}" = "$f" &&
		x="$f" || x="/usr/lib${f##/usr/local/lib}"
		test -f "${ROOT}$x" || echo "cp $f /var/www$x"
	done
}


##############################################################################


main
