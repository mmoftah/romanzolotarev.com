#!/bin/sh -e

main () {
	DB='/var/www/db/www'
	test -d "$DB" || fail "$DB: not found"
	EXP_TIME='3600'
	FROM='hi@romanzolotarev.com'
	NAME='Roman Zolotarev'

	mail_dispatch
	feedback_tokens
	m_magic_links
	m_expires_at
}

##########################################################################


mail_dispatch() {
	test -d "$DB/mail_queue" &&
	find "$DB/mail_queue" -type f | head -n 100 |
	while read -r m
	do
		test -f "$m" || break
		# sendmail -t -F "$(base64 "$NAME")" -f "$FROM" < "$m"
		sendmail -t -F "$NAME" -f "$FROM" < "$m"
		head -n 1 "$m"
		rm -v "$m"
	done
}


feedback_tokens() {
	test -d "$DB/tokens" &&
	find "$DB/tokens" -type f -cmin "+$(( EXP_TIME / 60 ))" -delete
}


m_magic_links() {
	test -d "$DB/magic_links" &&
	find "$DB/magic_links" -type f -cmin "+$(( EXP_TIME / 60 ))" -delete
}


m_expires_at() {
	if test -d "$DB/members"
	then
		paypal_init
		find "$DB/members" -type f -name 'paypal_agreement_id' |
		while read -r f
		do
			m_id="${f##$DB/members/}";m_id="${m_id%%/*}"
			a_id=$(cat "$f")
			paypal_check_agreement "$a_id" "$m_id"
		done

		now=$(date +%s)

		find "$DB/members" -type f -name 'expires_at' |
		while read -r f
		do
			e_at=$(cat "$f")
			e_in=$((e_at - now))
			# echo "${f%%/expires_at}: $e_at - $now = $e_in"
			test "$e_in" -lt 0 && rm -v "${f:?}"
		done

	fi
}


##########################################################################

paypal_check_agreement() {
	a_id="$1"
	m_id="$2"

	test -n "$a_id" || return

	a=$(paypal_get_agreement "$a_id")
	a_s=$(echo "$a" | jq -r .state)
	echo "$a" > "$DB/paypal/agreements/$a_id/$a_s.json"
	echo "$a_s" > "$DB/members/$m_id/paypal_agreement_state"
	echo "$m_id $a_id $a_s"

	if test "$a_s" = 'Active'
	then
		method=$(echo "$a" | jq -r .payer.payment_method)
		amount=$(echo "$a" |
			jq -r '.agreement_details.last_payment_amount.value')
		currency=$(echo "$a" |
			jq -r '.agreement_details.last_payment_amount.currency')
		date=$(echo "$a" |
			jq -r '.agreement_details.last_payment_date')
		nb_date=$(echo "$a" |
			jq -r '.agreement_details.next_billing_date')
		nb_time=$(date -j +%s "$(
			echo "$nb_date" |
			sed -E 's/(.*)-(.*)-(.*)T(.*):(.*):(.*)Z/\1\2\3\4\5.\6/'
		)")
		e_at=$((nb_time + 3600 * 24))
		p="$date	$nb_date	$e_at	$amount	$currency	$method	$a_id"
		echo "$p"
		echo "$p" > "$DB/members/$m_id/payments"
		chmod 0660 "$DB/members/$m_id/payments"
		echo "$e_at" > "$DB/members/$m_id/expires_at"
	fi
}


fail() {
	>&2 echo "$1"
	exit 1
}

paypal_init() {
	test -f "$DB/paypal/domain" || fail "no PAYPAL_DOMAIN"
	test -f "$DB/paypal/client_id" || fail "no PAYPAL_CLIENT_ID"
	test -f "$DB/paypal/secret" || fail "no PAYPAL_SECRET"

	PAYPAL_DOMAIN=$(cat "$DB/paypal/domain")
	PAYPAL_API="https://api.$PAYPAL_DOMAIN/v1"
	PAYPAL_CLIENT_ID="$(cat "$DB/paypal/client_id")"
	PAYPAL_SECRET="$(cat "$DB/paypal/secret")"

	PAYPAL_ACCESS_TOKEN=$(paypal_get_access_token)
	test -n "$PAYPAL_ACCESS_TOKEN" ||
	fail 'PayPal has no access token'
}

paypal_get_agreement() {
	curl -s "$PAYPAL_API/payments/billing-agreements/$1" \
	-H "Content-Type: application/json" \
	-H "Authorization: Bearer $PAYPAL_ACCESS_TOKEN"
}


paypal_get_access_token() {
	now=$(date +%s)
	f="$DB/paypal/access_token"
	if test -f "$f"
	then
		a_t=$(cut -f1 "$f")
		e_at=$(cut -f2 "$f")
		test "$now" -lt "$e_at"
		echo "$a_t" && return
	fi
	curl -s "$PAYPAL_API/oauth2/token" \
	-H "Accept: application/json" \
	-u "$PAYPAL_CLIENT_ID:$PAYPAL_SECRET" \
	-d "grant_type=client_credentials" |
	jq -r '.access_token + " " + (.expires_in | tostring)' | (
		read -r  a_t e_in
		echo "$a_t	$(( now + e_in - 5 ))" > "$f"
		echo "$a_t"
	)
}


# base64() {
# 	echo "=?utf-8?B?$(echo "$1"|b64encode /dev/stdin|sed '1d;$d')?="
# }

main
